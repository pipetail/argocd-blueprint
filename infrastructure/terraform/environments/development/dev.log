RAW provider 2020/11/07 15:39:25 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:39:26 Finished
RAW provider 2020/11/07 15:40:10 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:40:10 Finished
RAW provider 2020/11/07 15:46:27 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:46:28 Finished
RAW provider 2020/11/07 15:47:08 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:47:08 Finished
RAW provider 2020/11/07 15:51:21 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:51:21 Finished
RAW provider 2020/11/07 15:51:25 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:51:26 Finished
RAW provider 2020/11/07 15:51:47 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:51:47 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://741CA32046453C3FDC2733FFA90CCE60.gr7.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x7a, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x54, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4d, 0x4f, 0x72, 0xa, 0x50, 0x36, 0x4a, 0x73, 0x49, 0x41, 0x37, 0x64, 0x4c, 0x6c, 0x71, 0x76, 0x69, 0x49, 0x64, 0x42, 0x79, 0x48, 0x2f, 0x30, 0x66, 0x34, 0x66, 0x4e, 0x66, 0x6d, 0x74, 0x38, 0x6e, 0x54, 0x69, 0x76, 0x38, 0x46, 0x55, 0x30, 0x6d, 0x2f, 0x68, 0x61, 0x31, 0x35, 0x68, 0x2b, 0x66, 0x58, 0x42, 0x30, 0x36, 0x52, 0x7a, 0x78, 0x69, 0x6c, 0x4b, 0x78, 0x63, 0x77, 0x71, 0x49, 0x48, 0x75, 0x49, 0x39, 0xa, 0x38, 0x51, 0x4f, 0x4d, 0x4f, 0x49, 0x79, 0x38, 0x66, 0x37, 0x6f, 0x6e, 0x6a, 0x58, 0x62, 0x46, 0x4a, 0x32, 0x72, 0x4a, 0x73, 0x6e, 0x34, 0x76, 0x41, 0x37, 0x73, 0x53, 0x52, 0x42, 0x31, 0x4a, 0x56, 0x5a, 0x53, 0x56, 0x38, 0x44, 0x75, 0x4c, 0x4f, 0x48, 0x50, 0x6b, 0x54, 0x79, 0x51, 0x53, 0x79, 0x4c, 0x4c, 0x58, 0x6c, 0x52, 0x39, 0x73, 0x6e, 0x37, 0x6e, 0x2b, 0x4f, 0x73, 0x5a, 0x56, 0xa, 0x79, 0x48, 0x4e, 0x45, 0x5a, 0x32, 0x4a, 0x35, 0x57, 0x2b, 0x6e, 0x30, 0x43, 0x5a, 0x4a, 0x75, 0x47, 0x6e, 0x67, 0x4c, 0x6d, 0x58, 0x7a, 0x57, 0x69, 0x75, 0x42, 0x6b, 0x39, 0x32, 0x66, 0x38, 0x36, 0x6c, 0x71, 0x79, 0x76, 0x65, 0x56, 0x62, 0x6b, 0x31, 0x2b, 0x4d, 0x77, 0x4f, 0x79, 0x34, 0x2b, 0x4f, 0x38, 0x36, 0x73, 0x55, 0x41, 0x56, 0x69, 0x63, 0x52, 0x41, 0x42, 0x42, 0x69, 0x5a, 0xa, 0x79, 0x72, 0x46, 0x4b, 0x72, 0x58, 0x6d, 0x61, 0x59, 0x56, 0x65, 0x36, 0x39, 0x33, 0x48, 0x75, 0x78, 0x54, 0x39, 0x7a, 0x55, 0x55, 0x44, 0x6f, 0x77, 0x6c, 0x52, 0x54, 0x35, 0x6f, 0x77, 0x33, 0x76, 0x67, 0x63, 0x44, 0x57, 0x6a, 0x74, 0x43, 0x78, 0x50, 0x43, 0x71, 0x36, 0x4a, 0x53, 0x55, 0x52, 0x45, 0x2f, 0x75, 0x4d, 0x69, 0x34, 0x61, 0x31, 0x6e, 0x55, 0x76, 0x75, 0x73, 0x74, 0x53, 0xa, 0x4f, 0x79, 0x76, 0x4d, 0x54, 0x41, 0x4f, 0x59, 0x58, 0x5a, 0x59, 0x4b, 0x68, 0x2f, 0x77, 0x53, 0x4e, 0x55, 0x30, 0x42, 0x59, 0x55, 0x75, 0x41, 0x63, 0x33, 0x2b, 0x43, 0x4d, 0x34, 0x54, 0x35, 0x6f, 0x48, 0x6c, 0x35, 0x31, 0x4f, 0x4c, 0x75, 0x77, 0x51, 0x52, 0x36, 0x61, 0x67, 0x76, 0x55, 0x32, 0x49, 0x70, 0x31, 0x4d, 0x7a, 0x4e, 0x53, 0x57, 0x48, 0x72, 0x4d, 0x66, 0x65, 0x7a, 0x2b, 0xa, 0x45, 0x6d, 0x56, 0x43, 0x33, 0x7a, 0x65, 0x32, 0x31, 0x36, 0x6d, 0x63, 0x2f, 0x42, 0x59, 0x55, 0x71, 0x42, 0x55, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x45, 0x72, 0x51, 0x72, 0x31, 0x32, 0x49, 0x4b, 0x39, 0x4c, 0x74, 0x6c, 0x73, 0x61, 0x76, 0x50, 0x6e, 0x31, 0x2f, 0x59, 0x45, 0x79, 0x71, 0x66, 0x62, 0xa, 0x50, 0x69, 0x4c, 0x67, 0x48, 0x46, 0x57, 0x52, 0x31, 0x34, 0x6e, 0x47, 0x73, 0x44, 0x69, 0x70, 0x74, 0x30, 0x53, 0x37, 0x6b, 0x65, 0x53, 0x4b, 0x38, 0x39, 0x71, 0x63, 0x37, 0x4a, 0x63, 0x67, 0x48, 0x39, 0x6b, 0x6f, 0x6e, 0x50, 0x58, 0x6a, 0x49, 0x35, 0x6d, 0x55, 0x62, 0x43, 0x39, 0x58, 0x41, 0x57, 0x43, 0x54, 0x4b, 0x6e, 0x57, 0x5a, 0x51, 0x69, 0x42, 0x44, 0x69, 0x75, 0x70, 0x30, 0xa, 0x54, 0x48, 0x51, 0x31, 0x4a, 0x51, 0x75, 0x2f, 0x4f, 0x6b, 0x68, 0x6b, 0x79, 0x68, 0x64, 0x79, 0x53, 0x67, 0x45, 0x31, 0x6b, 0x76, 0x42, 0x44, 0x6b, 0x38, 0x39, 0x30, 0x73, 0x6f, 0x44, 0x56, 0x38, 0x71, 0x64, 0x6b, 0x4b, 0x46, 0x4e, 0x79, 0x7a, 0x6e, 0x7a, 0x7a, 0x4e, 0x61, 0x74, 0x57, 0x47, 0x7a, 0x55, 0x67, 0x2f, 0x30, 0x69, 0x66, 0x6a, 0x32, 0x69, 0x36, 0x61, 0x70, 0x4c, 0x6d, 0xa, 0x71, 0x7a, 0x51, 0x4f, 0x2b, 0x43, 0x54, 0x79, 0x38, 0x6c, 0x75, 0x65, 0x57, 0x39, 0x53, 0x6f, 0x42, 0x49, 0x5a, 0x67, 0x5a, 0x48, 0x74, 0x4c, 0x32, 0x54, 0x6e, 0x43, 0x39, 0x6a, 0x44, 0x35, 0x78, 0x73, 0x67, 0x49, 0x66, 0x75, 0x34, 0x53, 0x5a, 0x77, 0x2b, 0x78, 0x4f, 0x4e, 0x53, 0x66, 0x6b, 0x46, 0x76, 0x63, 0x6e, 0x72, 0x30, 0x72, 0x6f, 0x38, 0x51, 0x47, 0x55, 0x4b, 0x31, 0x51, 0xa, 0x61, 0x47, 0x45, 0x62, 0x57, 0x49, 0x57, 0x50, 0x6d, 0x4c, 0x62, 0x70, 0x38, 0x51, 0x6d, 0x5a, 0x64, 0x4a, 0x54, 0x32, 0x34, 0x67, 0x75, 0x52, 0x33, 0x33, 0x68, 0x77, 0x68, 0x36, 0x68, 0x4d, 0x46, 0x67, 0x55, 0x6e, 0x6a, 0x78, 0x48, 0x35, 0x52, 0x4d, 0x66, 0x4e, 0x47, 0x31, 0x32, 0x32, 0x6e, 0x48, 0x6f, 0x32, 0x68, 0x31, 0x70, 0x6a, 0x58, 0x73, 0x4d, 0x38, 0x36, 0x6b, 0x4e, 0x4f, 0xa, 0x7a, 0x78, 0x30, 0x59, 0x6a, 0x62, 0x43, 0x5a, 0x70, 0x71, 0x49, 0x52, 0x50, 0x33, 0x34, 0x77, 0x6b, 0x64, 0x69, 0x68, 0x78, 0x73, 0x53, 0x54, 0x54, 0x44, 0x48, 0x74, 0x54, 0x6e, 0x70, 0x58, 0x74, 0x6c, 0x63, 0x5a, 0x57, 0x57, 0x4c, 0x2b, 0x46, 0x66, 0x2f, 0x5a, 0x50, 0x75, 0x6d, 0x43, 0x39, 0x58, 0x5a, 0x4d, 0x77, 0x37, 0x33, 0x75, 0x2b, 0x44, 0x6b, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/11/07 15:51:48 Finished
RAW provider 2020/11/07 15:51:54 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:51:54 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://741CA32046453C3FDC2733FFA90CCE60.gr7.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x7a, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x54, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4d, 0x4f, 0x72, 0xa, 0x50, 0x36, 0x4a, 0x73, 0x49, 0x41, 0x37, 0x64, 0x4c, 0x6c, 0x71, 0x76, 0x69, 0x49, 0x64, 0x42, 0x79, 0x48, 0x2f, 0x30, 0x66, 0x34, 0x66, 0x4e, 0x66, 0x6d, 0x74, 0x38, 0x6e, 0x54, 0x69, 0x76, 0x38, 0x46, 0x55, 0x30, 0x6d, 0x2f, 0x68, 0x61, 0x31, 0x35, 0x68, 0x2b, 0x66, 0x58, 0x42, 0x30, 0x36, 0x52, 0x7a, 0x78, 0x69, 0x6c, 0x4b, 0x78, 0x63, 0x77, 0x71, 0x49, 0x48, 0x75, 0x49, 0x39, 0xa, 0x38, 0x51, 0x4f, 0x4d, 0x4f, 0x49, 0x79, 0x38, 0x66, 0x37, 0x6f, 0x6e, 0x6a, 0x58, 0x62, 0x46, 0x4a, 0x32, 0x72, 0x4a, 0x73, 0x6e, 0x34, 0x76, 0x41, 0x37, 0x73, 0x53, 0x52, 0x42, 0x31, 0x4a, 0x56, 0x5a, 0x53, 0x56, 0x38, 0x44, 0x75, 0x4c, 0x4f, 0x48, 0x50, 0x6b, 0x54, 0x79, 0x51, 0x53, 0x79, 0x4c, 0x4c, 0x58, 0x6c, 0x52, 0x39, 0x73, 0x6e, 0x37, 0x6e, 0x2b, 0x4f, 0x73, 0x5a, 0x56, 0xa, 0x79, 0x48, 0x4e, 0x45, 0x5a, 0x32, 0x4a, 0x35, 0x57, 0x2b, 0x6e, 0x30, 0x43, 0x5a, 0x4a, 0x75, 0x47, 0x6e, 0x67, 0x4c, 0x6d, 0x58, 0x7a, 0x57, 0x69, 0x75, 0x42, 0x6b, 0x39, 0x32, 0x66, 0x38, 0x36, 0x6c, 0x71, 0x79, 0x76, 0x65, 0x56, 0x62, 0x6b, 0x31, 0x2b, 0x4d, 0x77, 0x4f, 0x79, 0x34, 0x2b, 0x4f, 0x38, 0x36, 0x73, 0x55, 0x41, 0x56, 0x69, 0x63, 0x52, 0x41, 0x42, 0x42, 0x69, 0x5a, 0xa, 0x79, 0x72, 0x46, 0x4b, 0x72, 0x58, 0x6d, 0x61, 0x59, 0x56, 0x65, 0x36, 0x39, 0x33, 0x48, 0x75, 0x78, 0x54, 0x39, 0x7a, 0x55, 0x55, 0x44, 0x6f, 0x77, 0x6c, 0x52, 0x54, 0x35, 0x6f, 0x77, 0x33, 0x76, 0x67, 0x63, 0x44, 0x57, 0x6a, 0x74, 0x43, 0x78, 0x50, 0x43, 0x71, 0x36, 0x4a, 0x53, 0x55, 0x52, 0x45, 0x2f, 0x75, 0x4d, 0x69, 0x34, 0x61, 0x31, 0x6e, 0x55, 0x76, 0x75, 0x73, 0x74, 0x53, 0xa, 0x4f, 0x79, 0x76, 0x4d, 0x54, 0x41, 0x4f, 0x59, 0x58, 0x5a, 0x59, 0x4b, 0x68, 0x2f, 0x77, 0x53, 0x4e, 0x55, 0x30, 0x42, 0x59, 0x55, 0x75, 0x41, 0x63, 0x33, 0x2b, 0x43, 0x4d, 0x34, 0x54, 0x35, 0x6f, 0x48, 0x6c, 0x35, 0x31, 0x4f, 0x4c, 0x75, 0x77, 0x51, 0x52, 0x36, 0x61, 0x67, 0x76, 0x55, 0x32, 0x49, 0x70, 0x31, 0x4d, 0x7a, 0x4e, 0x53, 0x57, 0x48, 0x72, 0x4d, 0x66, 0x65, 0x7a, 0x2b, 0xa, 0x45, 0x6d, 0x56, 0x43, 0x33, 0x7a, 0x65, 0x32, 0x31, 0x36, 0x6d, 0x63, 0x2f, 0x42, 0x59, 0x55, 0x71, 0x42, 0x55, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x45, 0x72, 0x51, 0x72, 0x31, 0x32, 0x49, 0x4b, 0x39, 0x4c, 0x74, 0x6c, 0x73, 0x61, 0x76, 0x50, 0x6e, 0x31, 0x2f, 0x59, 0x45, 0x79, 0x71, 0x66, 0x62, 0xa, 0x50, 0x69, 0x4c, 0x67, 0x48, 0x46, 0x57, 0x52, 0x31, 0x34, 0x6e, 0x47, 0x73, 0x44, 0x69, 0x70, 0x74, 0x30, 0x53, 0x37, 0x6b, 0x65, 0x53, 0x4b, 0x38, 0x39, 0x71, 0x63, 0x37, 0x4a, 0x63, 0x67, 0x48, 0x39, 0x6b, 0x6f, 0x6e, 0x50, 0x58, 0x6a, 0x49, 0x35, 0x6d, 0x55, 0x62, 0x43, 0x39, 0x58, 0x41, 0x57, 0x43, 0x54, 0x4b, 0x6e, 0x57, 0x5a, 0x51, 0x69, 0x42, 0x44, 0x69, 0x75, 0x70, 0x30, 0xa, 0x54, 0x48, 0x51, 0x31, 0x4a, 0x51, 0x75, 0x2f, 0x4f, 0x6b, 0x68, 0x6b, 0x79, 0x68, 0x64, 0x79, 0x53, 0x67, 0x45, 0x31, 0x6b, 0x76, 0x42, 0x44, 0x6b, 0x38, 0x39, 0x30, 0x73, 0x6f, 0x44, 0x56, 0x38, 0x71, 0x64, 0x6b, 0x4b, 0x46, 0x4e, 0x79, 0x7a, 0x6e, 0x7a, 0x7a, 0x4e, 0x61, 0x74, 0x57, 0x47, 0x7a, 0x55, 0x67, 0x2f, 0x30, 0x69, 0x66, 0x6a, 0x32, 0x69, 0x36, 0x61, 0x70, 0x4c, 0x6d, 0xa, 0x71, 0x7a, 0x51, 0x4f, 0x2b, 0x43, 0x54, 0x79, 0x38, 0x6c, 0x75, 0x65, 0x57, 0x39, 0x53, 0x6f, 0x42, 0x49, 0x5a, 0x67, 0x5a, 0x48, 0x74, 0x4c, 0x32, 0x54, 0x6e, 0x43, 0x39, 0x6a, 0x44, 0x35, 0x78, 0x73, 0x67, 0x49, 0x66, 0x75, 0x34, 0x53, 0x5a, 0x77, 0x2b, 0x78, 0x4f, 0x4e, 0x53, 0x66, 0x6b, 0x46, 0x76, 0x63, 0x6e, 0x72, 0x30, 0x72, 0x6f, 0x38, 0x51, 0x47, 0x55, 0x4b, 0x31, 0x51, 0xa, 0x61, 0x47, 0x45, 0x62, 0x57, 0x49, 0x57, 0x50, 0x6d, 0x4c, 0x62, 0x70, 0x38, 0x51, 0x6d, 0x5a, 0x64, 0x4a, 0x54, 0x32, 0x34, 0x67, 0x75, 0x52, 0x33, 0x33, 0x68, 0x77, 0x68, 0x36, 0x68, 0x4d, 0x46, 0x67, 0x55, 0x6e, 0x6a, 0x78, 0x48, 0x35, 0x52, 0x4d, 0x66, 0x4e, 0x47, 0x31, 0x32, 0x32, 0x6e, 0x48, 0x6f, 0x32, 0x68, 0x31, 0x70, 0x6a, 0x58, 0x73, 0x4d, 0x38, 0x36, 0x6b, 0x4e, 0x4f, 0xa, 0x7a, 0x78, 0x30, 0x59, 0x6a, 0x62, 0x43, 0x5a, 0x70, 0x71, 0x49, 0x52, 0x50, 0x33, 0x34, 0x77, 0x6b, 0x64, 0x69, 0x68, 0x78, 0x73, 0x53, 0x54, 0x54, 0x44, 0x48, 0x74, 0x54, 0x6e, 0x70, 0x58, 0x74, 0x6c, 0x63, 0x5a, 0x57, 0x57, 0x4c, 0x2b, 0x46, 0x66, 0x2f, 0x5a, 0x50, 0x75, 0x6d, 0x43, 0x39, 0x58, 0x5a, 0x4d, 0x77, 0x37, 0x33, 0x75, 0x2b, 0x44, 0x6b, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/11/07 15:51:55 Finished
RAW provider 2020/11/07 15:52:04 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:52:04 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://741CA32046453C3FDC2733FFA90CCE60.gr7.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x7a, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x54, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4d, 0x4f, 0x72, 0xa, 0x50, 0x36, 0x4a, 0x73, 0x49, 0x41, 0x37, 0x64, 0x4c, 0x6c, 0x71, 0x76, 0x69, 0x49, 0x64, 0x42, 0x79, 0x48, 0x2f, 0x30, 0x66, 0x34, 0x66, 0x4e, 0x66, 0x6d, 0x74, 0x38, 0x6e, 0x54, 0x69, 0x76, 0x38, 0x46, 0x55, 0x30, 0x6d, 0x2f, 0x68, 0x61, 0x31, 0x35, 0x68, 0x2b, 0x66, 0x58, 0x42, 0x30, 0x36, 0x52, 0x7a, 0x78, 0x69, 0x6c, 0x4b, 0x78, 0x63, 0x77, 0x71, 0x49, 0x48, 0x75, 0x49, 0x39, 0xa, 0x38, 0x51, 0x4f, 0x4d, 0x4f, 0x49, 0x79, 0x38, 0x66, 0x37, 0x6f, 0x6e, 0x6a, 0x58, 0x62, 0x46, 0x4a, 0x32, 0x72, 0x4a, 0x73, 0x6e, 0x34, 0x76, 0x41, 0x37, 0x73, 0x53, 0x52, 0x42, 0x31, 0x4a, 0x56, 0x5a, 0x53, 0x56, 0x38, 0x44, 0x75, 0x4c, 0x4f, 0x48, 0x50, 0x6b, 0x54, 0x79, 0x51, 0x53, 0x79, 0x4c, 0x4c, 0x58, 0x6c, 0x52, 0x39, 0x73, 0x6e, 0x37, 0x6e, 0x2b, 0x4f, 0x73, 0x5a, 0x56, 0xa, 0x79, 0x48, 0x4e, 0x45, 0x5a, 0x32, 0x4a, 0x35, 0x57, 0x2b, 0x6e, 0x30, 0x43, 0x5a, 0x4a, 0x75, 0x47, 0x6e, 0x67, 0x4c, 0x6d, 0x58, 0x7a, 0x57, 0x69, 0x75, 0x42, 0x6b, 0x39, 0x32, 0x66, 0x38, 0x36, 0x6c, 0x71, 0x79, 0x76, 0x65, 0x56, 0x62, 0x6b, 0x31, 0x2b, 0x4d, 0x77, 0x4f, 0x79, 0x34, 0x2b, 0x4f, 0x38, 0x36, 0x73, 0x55, 0x41, 0x56, 0x69, 0x63, 0x52, 0x41, 0x42, 0x42, 0x69, 0x5a, 0xa, 0x79, 0x72, 0x46, 0x4b, 0x72, 0x58, 0x6d, 0x61, 0x59, 0x56, 0x65, 0x36, 0x39, 0x33, 0x48, 0x75, 0x78, 0x54, 0x39, 0x7a, 0x55, 0x55, 0x44, 0x6f, 0x77, 0x6c, 0x52, 0x54, 0x35, 0x6f, 0x77, 0x33, 0x76, 0x67, 0x63, 0x44, 0x57, 0x6a, 0x74, 0x43, 0x78, 0x50, 0x43, 0x71, 0x36, 0x4a, 0x53, 0x55, 0x52, 0x45, 0x2f, 0x75, 0x4d, 0x69, 0x34, 0x61, 0x31, 0x6e, 0x55, 0x76, 0x75, 0x73, 0x74, 0x53, 0xa, 0x4f, 0x79, 0x76, 0x4d, 0x54, 0x41, 0x4f, 0x59, 0x58, 0x5a, 0x59, 0x4b, 0x68, 0x2f, 0x77, 0x53, 0x4e, 0x55, 0x30, 0x42, 0x59, 0x55, 0x75, 0x41, 0x63, 0x33, 0x2b, 0x43, 0x4d, 0x34, 0x54, 0x35, 0x6f, 0x48, 0x6c, 0x35, 0x31, 0x4f, 0x4c, 0x75, 0x77, 0x51, 0x52, 0x36, 0x61, 0x67, 0x76, 0x55, 0x32, 0x49, 0x70, 0x31, 0x4d, 0x7a, 0x4e, 0x53, 0x57, 0x48, 0x72, 0x4d, 0x66, 0x65, 0x7a, 0x2b, 0xa, 0x45, 0x6d, 0x56, 0x43, 0x33, 0x7a, 0x65, 0x32, 0x31, 0x36, 0x6d, 0x63, 0x2f, 0x42, 0x59, 0x55, 0x71, 0x42, 0x55, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x45, 0x72, 0x51, 0x72, 0x31, 0x32, 0x49, 0x4b, 0x39, 0x4c, 0x74, 0x6c, 0x73, 0x61, 0x76, 0x50, 0x6e, 0x31, 0x2f, 0x59, 0x45, 0x79, 0x71, 0x66, 0x62, 0xa, 0x50, 0x69, 0x4c, 0x67, 0x48, 0x46, 0x57, 0x52, 0x31, 0x34, 0x6e, 0x47, 0x73, 0x44, 0x69, 0x70, 0x74, 0x30, 0x53, 0x37, 0x6b, 0x65, 0x53, 0x4b, 0x38, 0x39, 0x71, 0x63, 0x37, 0x4a, 0x63, 0x67, 0x48, 0x39, 0x6b, 0x6f, 0x6e, 0x50, 0x58, 0x6a, 0x49, 0x35, 0x6d, 0x55, 0x62, 0x43, 0x39, 0x58, 0x41, 0x57, 0x43, 0x54, 0x4b, 0x6e, 0x57, 0x5a, 0x51, 0x69, 0x42, 0x44, 0x69, 0x75, 0x70, 0x30, 0xa, 0x54, 0x48, 0x51, 0x31, 0x4a, 0x51, 0x75, 0x2f, 0x4f, 0x6b, 0x68, 0x6b, 0x79, 0x68, 0x64, 0x79, 0x53, 0x67, 0x45, 0x31, 0x6b, 0x76, 0x42, 0x44, 0x6b, 0x38, 0x39, 0x30, 0x73, 0x6f, 0x44, 0x56, 0x38, 0x71, 0x64, 0x6b, 0x4b, 0x46, 0x4e, 0x79, 0x7a, 0x6e, 0x7a, 0x7a, 0x4e, 0x61, 0x74, 0x57, 0x47, 0x7a, 0x55, 0x67, 0x2f, 0x30, 0x69, 0x66, 0x6a, 0x32, 0x69, 0x36, 0x61, 0x70, 0x4c, 0x6d, 0xa, 0x71, 0x7a, 0x51, 0x4f, 0x2b, 0x43, 0x54, 0x79, 0x38, 0x6c, 0x75, 0x65, 0x57, 0x39, 0x53, 0x6f, 0x42, 0x49, 0x5a, 0x67, 0x5a, 0x48, 0x74, 0x4c, 0x32, 0x54, 0x6e, 0x43, 0x39, 0x6a, 0x44, 0x35, 0x78, 0x73, 0x67, 0x49, 0x66, 0x75, 0x34, 0x53, 0x5a, 0x77, 0x2b, 0x78, 0x4f, 0x4e, 0x53, 0x66, 0x6b, 0x46, 0x76, 0x63, 0x6e, 0x72, 0x30, 0x72, 0x6f, 0x38, 0x51, 0x47, 0x55, 0x4b, 0x31, 0x51, 0xa, 0x61, 0x47, 0x45, 0x62, 0x57, 0x49, 0x57, 0x50, 0x6d, 0x4c, 0x62, 0x70, 0x38, 0x51, 0x6d, 0x5a, 0x64, 0x4a, 0x54, 0x32, 0x34, 0x67, 0x75, 0x52, 0x33, 0x33, 0x68, 0x77, 0x68, 0x36, 0x68, 0x4d, 0x46, 0x67, 0x55, 0x6e, 0x6a, 0x78, 0x48, 0x35, 0x52, 0x4d, 0x66, 0x4e, 0x47, 0x31, 0x32, 0x32, 0x6e, 0x48, 0x6f, 0x32, 0x68, 0x31, 0x70, 0x6a, 0x58, 0x73, 0x4d, 0x38, 0x36, 0x6b, 0x4e, 0x4f, 0xa, 0x7a, 0x78, 0x30, 0x59, 0x6a, 0x62, 0x43, 0x5a, 0x70, 0x71, 0x49, 0x52, 0x50, 0x33, 0x34, 0x77, 0x6b, 0x64, 0x69, 0x68, 0x78, 0x73, 0x53, 0x54, 0x54, 0x44, 0x48, 0x74, 0x54, 0x6e, 0x70, 0x58, 0x74, 0x6c, 0x63, 0x5a, 0x57, 0x57, 0x4c, 0x2b, 0x46, 0x66, 0x2f, 0x5a, 0x50, 0x75, 0x6d, 0x43, 0x39, 0x58, 0x5a, 0x4d, 0x77, 0x37, 0x33, 0x75, 0x2b, 0x44, 0x6b, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "test-config",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "test-config",
    (string) (len=9) "namespace": (string) (len=7) "default"
   }
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Create] API response:
(*unstructured.Unstructured)(0xc000488058)({
 Object: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=8) "metadata": (map[string]interface {}) (len=7) {
   (string) (len=4) "name": (string) (len=11) "test-config",
   (string) (len=9) "namespace": (string) (len=7) "default",
   (string) (len=8) "selfLink": (string) (len=49) "/api/v1/namespaces/default/configmaps/test-config",
   (string) (len=3) "uid": (string) (len=36) "965f8c33-94dd-4ad1-abfb-2678cf79aabf",
   (string) (len=15) "resourceVersion": (string) (len=4) "4055",
   (string) (len=17) "creationTimestamp": (string) (len=20) "2020-11-07T14:52:05Z",
   (string) (len=13) "managedFields": ([]interface {}) (len=1 cap=1) {
    (map[string]interface {}) (len=6) {
     (string) (len=8) "fieldsV1": (map[string]interface {}) (len=1) {
      (string) (len=6) "f:data": (map[string]interface {}) (len=1) {
       (string) (len=5) "f:foo": (map[string]interface {}) {
       }
      }
     },
     (string) (len=7) "manager": (string) (len=9) "Terraform",
     (string) (len=9) "operation": (string) (len=5) "Apply",
     (string) (len=10) "apiVersion": (string) (len=2) "v1",
     (string) (len=4) "time": (string) (len=20) "2020-11-07T14:52:05Z",
     (string) (len=10) "fieldsType": (string) (len=8) "FieldsV1"
    }
   }
  },
  (string) (len=4) "data": (map[string]interface {}) (len=1) {
   (string) (len=3) "foo": (string) (len=3) "bar"
  },
  (string) (len=4) "kind": (string) (len=9) "ConfigMap"
 }
})

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Create] transformed response:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=4) {
    (string) (len=8) "metadata": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=2) {
       (string) (len=9) "namespace": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "name": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=10) "apiVersion": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    },
    (string) (len=4) "data": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=3) "foo": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    },
    (string) (len=4) "kind": (cty.Type) {
     typeImpl: (cty.primitiveType) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      Kind: (cty.primitiveTypeKind) 83
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=4) {
  (string) (len=10) "apiVersion": (string) (len=2) "v1",
  (string) (len=4) "data": (map[string]interface {}) (len=1) {
   (string) (len=3) "foo": (string) (len=3) "bar"
  },
  (string) (len=4) "kind": (string) (len=9) "ConfigMap",
  (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
   (string) (len=4) "name": (string) (len=11) "test-config",
   (string) (len=9) "namespace": (string) (len=7) "default"
  }
 }
}

RAW provider 2020/11/07 15:52:05 [ApplyResourceChange][Create] transformed new state:
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "test-config",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>,
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=7) "default",
    (string) (len=4) "name": (string) (len=11) "test-config"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap"
  }
 }
}
RAW provider 2020/11/07 15:52:05 Finished
RAW provider 2020/11/07 15:53:44 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:53:44 Finished
RAW provider 2020/11/07 15:53:48 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:53:49 Finished
RAW provider 2020/11/07 15:53:58 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:53:59 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://741CA32046453C3FDC2733FFA90CCE60.gr7.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x7a, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x54, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4d, 0x4f, 0x72, 0xa, 0x50, 0x36, 0x4a, 0x73, 0x49, 0x41, 0x37, 0x64, 0x4c, 0x6c, 0x71, 0x76, 0x69, 0x49, 0x64, 0x42, 0x79, 0x48, 0x2f, 0x30, 0x66, 0x34, 0x66, 0x4e, 0x66, 0x6d, 0x74, 0x38, 0x6e, 0x54, 0x69, 0x76, 0x38, 0x46, 0x55, 0x30, 0x6d, 0x2f, 0x68, 0x61, 0x31, 0x35, 0x68, 0x2b, 0x66, 0x58, 0x42, 0x30, 0x36, 0x52, 0x7a, 0x78, 0x69, 0x6c, 0x4b, 0x78, 0x63, 0x77, 0x71, 0x49, 0x48, 0x75, 0x49, 0x39, 0xa, 0x38, 0x51, 0x4f, 0x4d, 0x4f, 0x49, 0x79, 0x38, 0x66, 0x37, 0x6f, 0x6e, 0x6a, 0x58, 0x62, 0x46, 0x4a, 0x32, 0x72, 0x4a, 0x73, 0x6e, 0x34, 0x76, 0x41, 0x37, 0x73, 0x53, 0x52, 0x42, 0x31, 0x4a, 0x56, 0x5a, 0x53, 0x56, 0x38, 0x44, 0x75, 0x4c, 0x4f, 0x48, 0x50, 0x6b, 0x54, 0x79, 0x51, 0x53, 0x79, 0x4c, 0x4c, 0x58, 0x6c, 0x52, 0x39, 0x73, 0x6e, 0x37, 0x6e, 0x2b, 0x4f, 0x73, 0x5a, 0x56, 0xa, 0x79, 0x48, 0x4e, 0x45, 0x5a, 0x32, 0x4a, 0x35, 0x57, 0x2b, 0x6e, 0x30, 0x43, 0x5a, 0x4a, 0x75, 0x47, 0x6e, 0x67, 0x4c, 0x6d, 0x58, 0x7a, 0x57, 0x69, 0x75, 0x42, 0x6b, 0x39, 0x32, 0x66, 0x38, 0x36, 0x6c, 0x71, 0x79, 0x76, 0x65, 0x56, 0x62, 0x6b, 0x31, 0x2b, 0x4d, 0x77, 0x4f, 0x79, 0x34, 0x2b, 0x4f, 0x38, 0x36, 0x73, 0x55, 0x41, 0x56, 0x69, 0x63, 0x52, 0x41, 0x42, 0x42, 0x69, 0x5a, 0xa, 0x79, 0x72, 0x46, 0x4b, 0x72, 0x58, 0x6d, 0x61, 0x59, 0x56, 0x65, 0x36, 0x39, 0x33, 0x48, 0x75, 0x78, 0x54, 0x39, 0x7a, 0x55, 0x55, 0x44, 0x6f, 0x77, 0x6c, 0x52, 0x54, 0x35, 0x6f, 0x77, 0x33, 0x76, 0x67, 0x63, 0x44, 0x57, 0x6a, 0x74, 0x43, 0x78, 0x50, 0x43, 0x71, 0x36, 0x4a, 0x53, 0x55, 0x52, 0x45, 0x2f, 0x75, 0x4d, 0x69, 0x34, 0x61, 0x31, 0x6e, 0x55, 0x76, 0x75, 0x73, 0x74, 0x53, 0xa, 0x4f, 0x79, 0x76, 0x4d, 0x54, 0x41, 0x4f, 0x59, 0x58, 0x5a, 0x59, 0x4b, 0x68, 0x2f, 0x77, 0x53, 0x4e, 0x55, 0x30, 0x42, 0x59, 0x55, 0x75, 0x41, 0x63, 0x33, 0x2b, 0x43, 0x4d, 0x34, 0x54, 0x35, 0x6f, 0x48, 0x6c, 0x35, 0x31, 0x4f, 0x4c, 0x75, 0x77, 0x51, 0x52, 0x36, 0x61, 0x67, 0x76, 0x55, 0x32, 0x49, 0x70, 0x31, 0x4d, 0x7a, 0x4e, 0x53, 0x57, 0x48, 0x72, 0x4d, 0x66, 0x65, 0x7a, 0x2b, 0xa, 0x45, 0x6d, 0x56, 0x43, 0x33, 0x7a, 0x65, 0x32, 0x31, 0x36, 0x6d, 0x63, 0x2f, 0x42, 0x59, 0x55, 0x71, 0x42, 0x55, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x45, 0x72, 0x51, 0x72, 0x31, 0x32, 0x49, 0x4b, 0x39, 0x4c, 0x74, 0x6c, 0x73, 0x61, 0x76, 0x50, 0x6e, 0x31, 0x2f, 0x59, 0x45, 0x79, 0x71, 0x66, 0x62, 0xa, 0x50, 0x69, 0x4c, 0x67, 0x48, 0x46, 0x57, 0x52, 0x31, 0x34, 0x6e, 0x47, 0x73, 0x44, 0x69, 0x70, 0x74, 0x30, 0x53, 0x37, 0x6b, 0x65, 0x53, 0x4b, 0x38, 0x39, 0x71, 0x63, 0x37, 0x4a, 0x63, 0x67, 0x48, 0x39, 0x6b, 0x6f, 0x6e, 0x50, 0x58, 0x6a, 0x49, 0x35, 0x6d, 0x55, 0x62, 0x43, 0x39, 0x58, 0x41, 0x57, 0x43, 0x54, 0x4b, 0x6e, 0x57, 0x5a, 0x51, 0x69, 0x42, 0x44, 0x69, 0x75, 0x70, 0x30, 0xa, 0x54, 0x48, 0x51, 0x31, 0x4a, 0x51, 0x75, 0x2f, 0x4f, 0x6b, 0x68, 0x6b, 0x79, 0x68, 0x64, 0x79, 0x53, 0x67, 0x45, 0x31, 0x6b, 0x76, 0x42, 0x44, 0x6b, 0x38, 0x39, 0x30, 0x73, 0x6f, 0x44, 0x56, 0x38, 0x71, 0x64, 0x6b, 0x4b, 0x46, 0x4e, 0x79, 0x7a, 0x6e, 0x7a, 0x7a, 0x4e, 0x61, 0x74, 0x57, 0x47, 0x7a, 0x55, 0x67, 0x2f, 0x30, 0x69, 0x66, 0x6a, 0x32, 0x69, 0x36, 0x61, 0x70, 0x4c, 0x6d, 0xa, 0x71, 0x7a, 0x51, 0x4f, 0x2b, 0x43, 0x54, 0x79, 0x38, 0x6c, 0x75, 0x65, 0x57, 0x39, 0x53, 0x6f, 0x42, 0x49, 0x5a, 0x67, 0x5a, 0x48, 0x74, 0x4c, 0x32, 0x54, 0x6e, 0x43, 0x39, 0x6a, 0x44, 0x35, 0x78, 0x73, 0x67, 0x49, 0x66, 0x75, 0x34, 0x53, 0x5a, 0x77, 0x2b, 0x78, 0x4f, 0x4e, 0x53, 0x66, 0x6b, 0x46, 0x76, 0x63, 0x6e, 0x72, 0x30, 0x72, 0x6f, 0x38, 0x51, 0x47, 0x55, 0x4b, 0x31, 0x51, 0xa, 0x61, 0x47, 0x45, 0x62, 0x57, 0x49, 0x57, 0x50, 0x6d, 0x4c, 0x62, 0x70, 0x38, 0x51, 0x6d, 0x5a, 0x64, 0x4a, 0x54, 0x32, 0x34, 0x67, 0x75, 0x52, 0x33, 0x33, 0x68, 0x77, 0x68, 0x36, 0x68, 0x4d, 0x46, 0x67, 0x55, 0x6e, 0x6a, 0x78, 0x48, 0x35, 0x52, 0x4d, 0x66, 0x4e, 0x47, 0x31, 0x32, 0x32, 0x6e, 0x48, 0x6f, 0x32, 0x68, 0x31, 0x70, 0x6a, 0x58, 0x73, 0x4d, 0x38, 0x36, 0x6b, 0x4e, 0x4f, 0xa, 0x7a, 0x78, 0x30, 0x59, 0x6a, 0x62, 0x43, 0x5a, 0x70, 0x71, 0x49, 0x52, 0x50, 0x33, 0x34, 0x77, 0x6b, 0x64, 0x69, 0x68, 0x78, 0x73, 0x53, 0x54, 0x54, 0x44, 0x48, 0x74, 0x54, 0x6e, 0x70, 0x58, 0x74, 0x6c, 0x63, 0x5a, 0x57, 0x57, 0x4c, 0x2b, 0x46, 0x66, 0x2f, 0x5a, 0x50, 0x75, 0x6d, 0x43, 0x39, 0x58, 0x5a, 0x4d, 0x77, 0x37, 0x33, 0x75, 0x2b, 0x44, 0x6b, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/11/07 15:54:00 Finished
RAW provider 2020/11/07 15:54:01 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:54:18 Starting up with command line: []string{".terraform/plugins/registry.terraform.io/hashicorp/kubernetes-alpha/0.2.1/windows_amd64/terraform-provider-kubernetes-alpha_v0.2.1_x5.exe"}
RAW provider 2020/11/07 15:54:18 [Configure][ClientConfig] (rest.Config) &rest.Config{Host:"https://741CA32046453C3FDC2733FFA90CCE60.gr7.eu-west-1.eks.amazonaws.com", APIPath:"", ContentConfig:rest.ContentConfig{AcceptContentTypes:"", ContentType:"", GroupVersion:(*schema.GroupVersion)(nil), NegotiatedSerializer:runtime.NegotiatedSerializer(nil)}, Username:"", Password:"", BearerToken:"--- REDACTED ---", BearerTokenFile:"", Impersonate:rest.ImpersonationConfig{UserName:"", Groups:[]string(nil), Extra:map[string][]string(nil)}, AuthProvider:<nil>, AuthConfigPersister:rest.AuthProviderConfigPersister(nil), ExecProvider:<nil>, TLSClientConfig:rest.sanitizedTLSClientConfig{Insecure:false, ServerName:"", CertFile:"", KeyFile:"", CAFile:"", CertData:[]uint8(nil), KeyData:[]uint8(nil), CAData:[]uint8{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa, 0x4d, 0x49, 0x49, 0x43, 0x79, 0x44, 0x43, 0x43, 0x41, 0x62, 0x43, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x44, 0x45, 0x77, 0x70, 0x72, 0x64, 0x57, 0x4a, 0x6c, 0xa, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x47, 0x56, 0x7a, 0x4d, 0x42, 0x34, 0x58, 0x44, 0x54, 0x49, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x7a, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x58, 0x44, 0x54, 0x4d, 0x77, 0x4d, 0x54, 0x45, 0x77, 0x4e, 0x54, 0x45, 0x30, 0x4d, 0x6a, 0x6b, 0x31, 0x4d, 0x6c, 0x6f, 0x77, 0x46, 0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0xa, 0x41, 0x78, 0x4d, 0x4b, 0x61, 0x33, 0x56, 0x69, 0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x52, 0x6c, 0x63, 0x7a, 0x43, 0x43, 0x41, 0x53, 0x49, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x42, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x50, 0x41, 0x44, 0x43, 0x43, 0x41, 0x51, 0x6f, 0x43, 0x67, 0x67, 0x45, 0x42, 0x41, 0x4d, 0x4f, 0x72, 0xa, 0x50, 0x36, 0x4a, 0x73, 0x49, 0x41, 0x37, 0x64, 0x4c, 0x6c, 0x71, 0x76, 0x69, 0x49, 0x64, 0x42, 0x79, 0x48, 0x2f, 0x30, 0x66, 0x34, 0x66, 0x4e, 0x66, 0x6d, 0x74, 0x38, 0x6e, 0x54, 0x69, 0x76, 0x38, 0x46, 0x55, 0x30, 0x6d, 0x2f, 0x68, 0x61, 0x31, 0x35, 0x68, 0x2b, 0x66, 0x58, 0x42, 0x30, 0x36, 0x52, 0x7a, 0x78, 0x69, 0x6c, 0x4b, 0x78, 0x63, 0x77, 0x71, 0x49, 0x48, 0x75, 0x49, 0x39, 0xa, 0x38, 0x51, 0x4f, 0x4d, 0x4f, 0x49, 0x79, 0x38, 0x66, 0x37, 0x6f, 0x6e, 0x6a, 0x58, 0x62, 0x46, 0x4a, 0x32, 0x72, 0x4a, 0x73, 0x6e, 0x34, 0x76, 0x41, 0x37, 0x73, 0x53, 0x52, 0x42, 0x31, 0x4a, 0x56, 0x5a, 0x53, 0x56, 0x38, 0x44, 0x75, 0x4c, 0x4f, 0x48, 0x50, 0x6b, 0x54, 0x79, 0x51, 0x53, 0x79, 0x4c, 0x4c, 0x58, 0x6c, 0x52, 0x39, 0x73, 0x6e, 0x37, 0x6e, 0x2b, 0x4f, 0x73, 0x5a, 0x56, 0xa, 0x79, 0x48, 0x4e, 0x45, 0x5a, 0x32, 0x4a, 0x35, 0x57, 0x2b, 0x6e, 0x30, 0x43, 0x5a, 0x4a, 0x75, 0x47, 0x6e, 0x67, 0x4c, 0x6d, 0x58, 0x7a, 0x57, 0x69, 0x75, 0x42, 0x6b, 0x39, 0x32, 0x66, 0x38, 0x36, 0x6c, 0x71, 0x79, 0x76, 0x65, 0x56, 0x62, 0x6b, 0x31, 0x2b, 0x4d, 0x77, 0x4f, 0x79, 0x34, 0x2b, 0x4f, 0x38, 0x36, 0x73, 0x55, 0x41, 0x56, 0x69, 0x63, 0x52, 0x41, 0x42, 0x42, 0x69, 0x5a, 0xa, 0x79, 0x72, 0x46, 0x4b, 0x72, 0x58, 0x6d, 0x61, 0x59, 0x56, 0x65, 0x36, 0x39, 0x33, 0x48, 0x75, 0x78, 0x54, 0x39, 0x7a, 0x55, 0x55, 0x44, 0x6f, 0x77, 0x6c, 0x52, 0x54, 0x35, 0x6f, 0x77, 0x33, 0x76, 0x67, 0x63, 0x44, 0x57, 0x6a, 0x74, 0x43, 0x78, 0x50, 0x43, 0x71, 0x36, 0x4a, 0x53, 0x55, 0x52, 0x45, 0x2f, 0x75, 0x4d, 0x69, 0x34, 0x61, 0x31, 0x6e, 0x55, 0x76, 0x75, 0x73, 0x74, 0x53, 0xa, 0x4f, 0x79, 0x76, 0x4d, 0x54, 0x41, 0x4f, 0x59, 0x58, 0x5a, 0x59, 0x4b, 0x68, 0x2f, 0x77, 0x53, 0x4e, 0x55, 0x30, 0x42, 0x59, 0x55, 0x75, 0x41, 0x63, 0x33, 0x2b, 0x43, 0x4d, 0x34, 0x54, 0x35, 0x6f, 0x48, 0x6c, 0x35, 0x31, 0x4f, 0x4c, 0x75, 0x77, 0x51, 0x52, 0x36, 0x61, 0x67, 0x76, 0x55, 0x32, 0x49, 0x70, 0x31, 0x4d, 0x7a, 0x4e, 0x53, 0x57, 0x48, 0x72, 0x4d, 0x66, 0x65, 0x7a, 0x2b, 0xa, 0x45, 0x6d, 0x56, 0x43, 0x33, 0x7a, 0x65, 0x32, 0x31, 0x36, 0x6d, 0x63, 0x2f, 0x42, 0x59, 0x55, 0x71, 0x42, 0x55, 0x43, 0x41, 0x77, 0x45, 0x41, 0x41, 0x61, 0x4d, 0x6a, 0x4d, 0x43, 0x45, 0x77, 0x44, 0x67, 0x59, 0x44, 0x56, 0x52, 0x30, 0x50, 0x41, 0x51, 0x48, 0x2f, 0x42, 0x41, 0x51, 0x44, 0x41, 0x67, 0x4b, 0x6b, 0x4d, 0x41, 0x38, 0x47, 0x41, 0x31, 0x55, 0x64, 0x45, 0x77, 0x45, 0x42, 0xa, 0x2f, 0x77, 0x51, 0x46, 0x4d, 0x41, 0x4d, 0x42, 0x41, 0x66, 0x38, 0x77, 0x44, 0x51, 0x59, 0x4a, 0x4b, 0x6f, 0x5a, 0x49, 0x68, 0x76, 0x63, 0x4e, 0x41, 0x51, 0x45, 0x4c, 0x42, 0x51, 0x41, 0x44, 0x67, 0x67, 0x45, 0x42, 0x41, 0x47, 0x4c, 0x45, 0x72, 0x51, 0x72, 0x31, 0x32, 0x49, 0x4b, 0x39, 0x4c, 0x74, 0x6c, 0x73, 0x61, 0x76, 0x50, 0x6e, 0x31, 0x2f, 0x59, 0x45, 0x79, 0x71, 0x66, 0x62, 0xa, 0x50, 0x69, 0x4c, 0x67, 0x48, 0x46, 0x57, 0x52, 0x31, 0x34, 0x6e, 0x47, 0x73, 0x44, 0x69, 0x70, 0x74, 0x30, 0x53, 0x37, 0x6b, 0x65, 0x53, 0x4b, 0x38, 0x39, 0x71, 0x63, 0x37, 0x4a, 0x63, 0x67, 0x48, 0x39, 0x6b, 0x6f, 0x6e, 0x50, 0x58, 0x6a, 0x49, 0x35, 0x6d, 0x55, 0x62, 0x43, 0x39, 0x58, 0x41, 0x57, 0x43, 0x54, 0x4b, 0x6e, 0x57, 0x5a, 0x51, 0x69, 0x42, 0x44, 0x69, 0x75, 0x70, 0x30, 0xa, 0x54, 0x48, 0x51, 0x31, 0x4a, 0x51, 0x75, 0x2f, 0x4f, 0x6b, 0x68, 0x6b, 0x79, 0x68, 0x64, 0x79, 0x53, 0x67, 0x45, 0x31, 0x6b, 0x76, 0x42, 0x44, 0x6b, 0x38, 0x39, 0x30, 0x73, 0x6f, 0x44, 0x56, 0x38, 0x71, 0x64, 0x6b, 0x4b, 0x46, 0x4e, 0x79, 0x7a, 0x6e, 0x7a, 0x7a, 0x4e, 0x61, 0x74, 0x57, 0x47, 0x7a, 0x55, 0x67, 0x2f, 0x30, 0x69, 0x66, 0x6a, 0x32, 0x69, 0x36, 0x61, 0x70, 0x4c, 0x6d, 0xa, 0x71, 0x7a, 0x51, 0x4f, 0x2b, 0x43, 0x54, 0x79, 0x38, 0x6c, 0x75, 0x65, 0x57, 0x39, 0x53, 0x6f, 0x42, 0x49, 0x5a, 0x67, 0x5a, 0x48, 0x74, 0x4c, 0x32, 0x54, 0x6e, 0x43, 0x39, 0x6a, 0x44, 0x35, 0x78, 0x73, 0x67, 0x49, 0x66, 0x75, 0x34, 0x53, 0x5a, 0x77, 0x2b, 0x78, 0x4f, 0x4e, 0x53, 0x66, 0x6b, 0x46, 0x76, 0x63, 0x6e, 0x72, 0x30, 0x72, 0x6f, 0x38, 0x51, 0x47, 0x55, 0x4b, 0x31, 0x51, 0xa, 0x61, 0x47, 0x45, 0x62, 0x57, 0x49, 0x57, 0x50, 0x6d, 0x4c, 0x62, 0x70, 0x38, 0x51, 0x6d, 0x5a, 0x64, 0x4a, 0x54, 0x32, 0x34, 0x67, 0x75, 0x52, 0x33, 0x33, 0x68, 0x77, 0x68, 0x36, 0x68, 0x4d, 0x46, 0x67, 0x55, 0x6e, 0x6a, 0x78, 0x48, 0x35, 0x52, 0x4d, 0x66, 0x4e, 0x47, 0x31, 0x32, 0x32, 0x6e, 0x48, 0x6f, 0x32, 0x68, 0x31, 0x70, 0x6a, 0x58, 0x73, 0x4d, 0x38, 0x36, 0x6b, 0x4e, 0x4f, 0xa, 0x7a, 0x78, 0x30, 0x59, 0x6a, 0x62, 0x43, 0x5a, 0x70, 0x71, 0x49, 0x52, 0x50, 0x33, 0x34, 0x77, 0x6b, 0x64, 0x69, 0x68, 0x78, 0x73, 0x53, 0x54, 0x54, 0x44, 0x48, 0x74, 0x54, 0x6e, 0x70, 0x58, 0x74, 0x6c, 0x63, 0x5a, 0x57, 0x57, 0x4c, 0x2b, 0x46, 0x66, 0x2f, 0x5a, 0x50, 0x75, 0x6d, 0x43, 0x39, 0x58, 0x5a, 0x4d, 0x77, 0x37, 0x33, 0x75, 0x2b, 0x44, 0x6b, 0x3d, 0xa, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0xa}, NextProtos:[]string(nil)}, UserAgent:"", DisableCompression:false, Transport:http.RoundTripper(nil), WrapTransport:(transport.WrapperFunc)(nil), QPS:0, Burst:0, RateLimiter:flowcontrol.RateLimiter(nil), Timeout:0, Dial:(func(context.Context, string, string) (net.Conn, error))(nil)}

RAW provider 2020/11/07 15:54:18 [ApplyResourceChange][Request][PlannedState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.pseudoTypeDynamic) {
      typeImplSigil: (cty.typeImplSigil) {
      }
     }
    },
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    }
   }
  }
 },
 v: (interface {}) <nil>
}

RAW provider 2020/11/07 15:54:18 [ApplyResourceChange][Request][PriorState]
(cty.Value) {
 ty: (cty.Type) {
  typeImpl: (cty.typeObject) {
   typeImplSigil: (cty.typeImplSigil) {
   },
   AttrTypes: (map[string]cty.Type) (len=3) {
    (string) (len=8) "wait_for": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=1) {
       (string) (len=6) "fields": (cty.Type) {
        typeImpl: (cty.typeMap) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         ElementTypeT: (cty.Type) {
          typeImpl: (cty.primitiveType) {
           typeImplSigil: (cty.typeImplSigil) {
           },
           Kind: (cty.primitiveTypeKind) 83
          }
         }
        }
       }
      }
     }
    },
    (string) (len=8) "manifest": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       }
      }
     }
    },
    (string) (len=6) "object": (cty.Type) {
     typeImpl: (cty.typeObject) {
      typeImplSigil: (cty.typeImplSigil) {
      },
      AttrTypes: (map[string]cty.Type) (len=4) {
       (string) (len=8) "metadata": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=2) {
          (string) (len=4) "name": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          },
          (string) (len=9) "namespace": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=10) "apiVersion": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       },
       (string) (len=4) "data": (cty.Type) {
        typeImpl: (cty.typeObject) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         AttrTypes: (map[string]cty.Type) (len=1) {
          (string) (len=3) "foo": (cty.Type) {
           typeImpl: (cty.primitiveType) {
            typeImplSigil: (cty.typeImplSigil) {
            },
            Kind: (cty.primitiveTypeKind) 83
           }
          }
         }
        }
       },
       (string) (len=4) "kind": (cty.Type) {
        typeImpl: (cty.primitiveType) {
         typeImplSigil: (cty.typeImplSigil) {
         },
         Kind: (cty.primitiveTypeKind) 83
        }
       }
      }
     }
    }
   }
  }
 },
 v: (map[string]interface {}) (len=3) {
  (string) (len=8) "manifest": (map[string]interface {}) (len=4) {
   (string) (len=10) "apiVersion": (string) (len=2) "v1",
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=9) "namespace": (string) (len=7) "default",
    (string) (len=4) "name": (string) (len=11) "test-config"
   }
  },
  (string) (len=6) "object": (map[string]interface {}) (len=4) {
   (string) (len=4) "data": (map[string]interface {}) (len=1) {
    (string) (len=3) "foo": (string) (len=3) "bar"
   },
   (string) (len=4) "kind": (string) (len=9) "ConfigMap",
   (string) (len=8) "metadata": (map[string]interface {}) (len=2) {
    (string) (len=4) "name": (string) (len=11) "test-config",
    (string) (len=9) "namespace": (string) (len=7) "default"
   },
   (string) (len=10) "apiVersion": (string) (len=2) "v1"
  },
  (string) (len=8) "wait_for": (interface {}) <nil>
 }
}

RAW provider 2020/11/07 15:54:18 [ApplyResourceChange][Request][PlannedPrivate]
([]uint8) <nil>

RAW provider 2020/11/07 15:54:19 Finished
RAW provider 2020/11/07 15:57:16 Finished
